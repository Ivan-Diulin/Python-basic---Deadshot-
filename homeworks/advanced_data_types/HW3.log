/usr/bin/python3.10 /home/ivn/cursor-py/HW3/HW3.py
1.
ID of 'int_a': 139876197877680
ID of 'str_b': 139876196737136
ID of 'set_c': 139876196901024
ID of 'lst_d': 139876196689280
ID of 'dict_e': 139876196689728
2.
ID of 'lst_d' after 2 appends: 139876196689280
3.
Type of 'int_a': <class 'int'>
Type of 'str_b': <class 'str'>
Type of 'set_c': <class 'set'>
Type of 'lst_d': <class 'list'>
Type of 'dict_e': <class 'dict'>
4.
Variable 'int_a' is of type: <class 'int'>
Variable 'str_b' is of type: <class 'str'>
Variable 'set_c' is of type: <class 'set'>
Variable 'lst_d' is of type: <class 'list'>
Variable 'dict_e' is of type: <class 'dict'>
5.
Anna has 3 apples and 5 peaches.
6.
Anna has 5 apples and 3 peaches.
7.
Anna has three apples and five peaches.
8.
Anna has     5 apples and   3 peaches.
9.
Anna has 3 apples and five peaches.
10.
Anna has three apples and five peaches.
11.
Anna has three apples and five peaches.
12.
List (1) without comprehension:
 [0, 1, 16, 9, 256, 25, 1296, 49, 4096, 81]
List (1) with comprehension:
 [0, 1, 16, 9, 256, 25, 1296, 49, 4096, 81]
13.
List (2) with comprehension:
 [0, 10, 1, 30, 2, 50, 3, 70, 4, 90]
List (2) without comprehension:
 [0, 10, 1, 30, 2, 50, 3, 70, 4, 90]
14.
Dict (3) without comprehension:
 {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}
Dict (3) with comprehension:
 {1: 1, 3: 9, 5: 25, 7: 49, 9: 81}
15.
Dict (4) without comprehension:
 {1: 1, 2: 4.0, 3: 9, 4: 8.0, 5: 25, 6: 12.0, 7: 49, 8: 16.0, 9: 81, 10: 20.0}
Dict (4) with comprehension:
 {1: 1, 2: 4.0, 3: 9, 4: 8.0, 5: 25, 6: 12.0, 7: 49, 8: 16.0, 9: 81, 10: 20.0}
16.
Dict (5) with comprehension:
 {0: 0, 2: 8, 4: 64, 6: 216, 8: 512}
Dict (4) without comprehension:
 {0: 0, 2: 8, 4: 64, 6: 216, 8: 512}
17.
Dict (6) with comprehension:
 {0: 0, 1: 1, 2: 8, 3: 3, 4: 64, 5: 5, 6: 216, 7: 7, 8: 512, 9: 9}
Dict (6) without comprehension:
 {0: 0, 1: 1, 2: 8, 3: 3, 4: 64, 5: 5, 6: 216, 7: 7, 8: 512, 9: 9}
18.
Function (7) without lambda:
 foo(5,7)= 5
Function (7) with lambda:
 foo_lam(5,7)= 5
19.
Function (7) with lambda:
 foo(5,7,9)= 7
Function (7) without lambda:
 foo_no_lmb(5,7,9)= 7
20-24.
lst_to_sort = [5, 18, 1, 24, 33, 15, 13, 55]
20.
Ascending sorting using 'sorted' function:
 [1, 5, 13, 15, 18, 24, 33, 55]
21.
Descending sorting using 'sorted' function:
 [55, 33, 24, 18, 15, 13, 5, 1]
22.
Using map and lambda the lst_to_sort is updated by multiplying each element by 2:
 [10, 36, 2, 48, 66, 30, 26, 110]
23.
Raising each list number to the corresponding number on another list:
 [2, 3, 4] ^ [5, 6, 7] = [32, 729, 16384]
24.
Using filter and lambda to filter the odd numbers in a lst_to_sort:
 [5, 1, 33, 15, 13, 55]
25.
From a set of values:
 [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 
using filter function to return only negative numbers:
 [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]
26.
Using the filter function finding common values in two lists:
 [1, 2, 3, 5, 7, 9] ∩ [2, 3, 5, 6, 7, 8] = [2, 3, 5, 7]

Process finished with exit code 0
